require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios");

const app = express();
const PORT = 3000;
app.use(cors());
app.use(express.json());


// ---- Google Generative AI ----
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-lite",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};


/** 
 * POST method route for normal chat(complete response, no streaming).
 * A chat message and the history of the conversation are send to the Gemini 
 * model. The complete response generated by the model to the posted message 
 * will be returned in the API's response.
 * 
 * Expects a JSON payload in the request with the following format:
 * Request:
 *   chat: string,
 *   history: Array
 *
 * Returns a JSON payload containing the model response with the 
 * following format:
 * Response:
 * 	text: string
 */
app.post("/chat", async (req, res) => {
  /** Read the request data. */
  const chatHistory = req.body.history || [];
  const msg = req.body.chat;
  
  const parts = [
    {text: "The model is acting as an interviewer for an organisation. The first message the model will receive will be a job title, from there the interviewer should ask 6 questions relevant to that role, starting with \"tell me a bit about yourself\". Upon conclusion of the 6 questions the model should provide some feedback about how the interviewee went. This should be clear and relatively conscise."},
    {text: "input: software developer"},
    {text: "output: Tell me a bit about yourself"},
    {text: "input: builder"},
    {text: "output: Tell me a bit about yourself"},
    {text: "input: "},
    {text: "output: "},
  ];
  const result = await model.generateContent({
    contents: [{ role: "user", parts }],
    generationConfig,
  });


  /** Initialize the chat with the given history. */
  const chat = model.generateContent({
    contents: [{ role: "user", parts }],
    generationConfig,
  });

  /** 
   * Send the message posted by the user to the Gemini model and read the 
   * response generated by the model.
   */

  const response = await result.response;
  const text = response.text();

  /** Send the response returned by the model as the API's response. */
  res.send({"text":text});

  console.log(result.response.text());
});



app.get("/", (req, res) => {
  res.send("Hello, World!");
});


app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
